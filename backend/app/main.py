from sqlite3 import IntegrityError
from fastapi import FastAPI, HTTPException, Request, Depends
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session
from app.dependencies import get_db
from .database import engine
from . import models, schema, database

models.Base.metadata.create_all(bind=engine)
app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173", "http://127.0.0.1:5173"],  # Specify your frontend URL(s)
    allow_credentials=True,
    allow_methods=["*"],  # Allow all methods (GET, POST, etc.)
    allow_headers=["*"],  # Allow all headers
)

@app.get("/")
def main(request: Request):
    print(f"Request headers: {request.headers}")
    return {"message": "Hello Appaca!"}
@app.post("/users/")
def register_user(user: schema.NewUser, db: Session = Depends(get_db)):
    try:
        # For debugging, skip the password hashing
        # hashed_pw = hash_password(user.password)  # Commented out for debugging
        hashed_pw = user.password  # Directly use the plain password (NOT recommended for production)
        
        # Create a new User object with the data
        db_user = models.User(
            username=user.username,
            email=user.email,
            hashed_password=hashed_pw,  # Using the plain password here for debugging
            role=user.role
        )
        
        # Debugging output for user data
        print(f"Inserting user with data: {db_user.username}, {db_user.email}, {db_user.role}")
        
        # Add the user to the session and commit to save
        db.add(db_user)
        db.commit()  # Commit the transaction to the database
        
        # Refresh the object to get the ID generated by the database
        db.refresh(db_user)
        
        # Print the ID of the created user
        print(f"User created with ID: {db_user.id}")
        
        # Return the created user object
        return db_user
    except IntegrityError as e:
        db.rollback()  # Rollback if an error occurs
        print("Integrity error:", e.orig)
        raise HTTPException(status_code=400, detail="Username or email already exists.")
